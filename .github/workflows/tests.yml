name: Tests

on:
  pull_request: {}
  push: { branches: [master] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  testAllModes:
    name: Test in ${{ matrix.testMode }} on version ${{ matrix.unityVersion }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - ""
        unityVersion:
          - 2019.4.0f1
        testMode:
          # - PlayMode
          - editmode
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: false

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Cache Library Folder
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-Tests-${{ hashFiles('Packages/manifest.json') }}
          restore-keys: |
            Library-Tests-
            Library-

      - name: Cache git lfs
        uses: actions/cache@v2
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1.2
          # use previous cache if current one is not found
          restore-keys: |
            ${{ runner.os }}-lfs-

      - name: Pull lfs data, if not cached
        run: git lfs pull

      - uses: webbertakken/unity-test-runner@v1.4
        id: tests
        with:
          projectPath: ${{ matrix.projectPath }}
          unityVersion: ${{ matrix.unityVersion }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          customParameters: |
            -enableCodeCoverage
            -coverageResultsPath ${{ matrix.testMode }}-artifacts
            -coverageOptions generateHtmlReport;generateBadgeReport;assemblyFilters:-PropHunt.Test*,-EditModeTests,-Assembly*;pathFilters:-*/Assets/Scripts/*Generated/*

      - name: Upload Results
        uses: actions/upload-artifact@v1
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}
      
      - name: Find Coverage
        run: |
          echo ::set-env name=COVERAGE_FILE::$(find ${{ steps.tests.outputs.artifactsPath }} -name "TestCoverageResults_0000.xml")
      
      - name: Sequence Coverage
        id: sequenceCoverage
        uses: QwerMike/xpath-action@v1
        with:
          filename: "${{ env.COVERAGE_FILE }}"
          expression: '//CoverageSession/Summary/@sequenceCoverage'
      
      - name: Branch Coverage
        id: branchCoverage
        uses: QwerMike/xpath-action@v1
        with:
          filename: "${{ env.COVERAGE_FILE }}"
          expression: '//CoverageSession/Summary/@branchCoverage'
      
      - name: Parse Coverage
        run: |
        echo ::set-env name=SEQUENCE_COVERAGE::$(cut -d "=" -f2- <<< steps.sequenceCoverage.outputs.result)
        echo ::set-env name=BRANCH_COVERAGE::$(cut -d "=" -f2- <<< steps.branchCoverage.outputs.result)
      
      - name: Add PR Comment
        uses: mshick/add-pr-comment@v1
        with:
          message: |
            Sequence Coverage: ${{ env.SEQUENCE_COVERAGE }}
            Branch Coverage: ${{ env.BRANCH_COVERAGE }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
          allow-repeats: false # This is the default
      
      - name: Assert Coverage
        run: |
          python3 -c "assert ${{ env.SEQUENCE_COVERAGE }} >= 95, 'Sequence coverage must be at least 95%, is only ${{ env.SEQUENCE_COVERAGE }}%'"
          python3 -c "assert ${{ env.BRANCH_COVERAGE }} >= 95, 'Branch coverage must be at least 95%, is only ${{ env.BRANCH_COVERAGE }}%'"
