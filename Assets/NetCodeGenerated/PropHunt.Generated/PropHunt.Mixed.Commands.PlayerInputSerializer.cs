//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;
using PropHunt.Mixed.Commands;


namespace PropHunt.Generated
{
    public struct PropHuntMixedCommandsPlayerInputSerializer : ICommandDataSerializer<PropHunt.Mixed.Commands.PlayerInput>
    {
        public void Serialize(ref DataStreamWriter writer, in PropHunt.Mixed.Commands.PlayerInput data)
        {
            writer.WriteUInt(data.tick);
            writer.WriteFloat(data.horizMove);
            writer.WriteFloat(data.vertMove);
            writer.WriteFloat(data.pitchChange);
            writer.WriteFloat(data.yawChange);
            writer.WriteUInt(data.jump);
            writer.WriteUInt(data.interact);
            writer.WriteUInt(data.sprint);
        }

        public void Deserialize(ref DataStreamReader reader, ref PropHunt.Mixed.Commands.PlayerInput data)
        {
            data.tick = (uint) reader.ReadUInt();
            data.horizMove = reader.ReadFloat();
            data.vertMove = reader.ReadFloat();
            data.pitchChange = reader.ReadFloat();
            data.yawChange = reader.ReadFloat();
            data.jump = (byte) reader.ReadUInt();
            data.interact = (byte) reader.ReadUInt();
            data.sprint = (byte) reader.ReadUInt();
        }

        public void Serialize(ref DataStreamWriter writer, in PropHunt.Mixed.Commands.PlayerInput data, in PropHunt.Mixed.Commands.PlayerInput baseline, NetworkCompressionModel compressionModel)
        {
            writer.WritePackedUIntDelta(data.tick, baseline.tick, compressionModel);
            writer.WritePackedFloatDelta(data.horizMove, baseline.horizMove, compressionModel);
            writer.WritePackedFloatDelta(data.vertMove, baseline.vertMove, compressionModel);
            writer.WritePackedFloatDelta(data.pitchChange, baseline.pitchChange, compressionModel);
            writer.WritePackedFloatDelta(data.yawChange, baseline.yawChange, compressionModel);
            writer.WritePackedUIntDelta(data.jump, baseline.jump, compressionModel);
            writer.WritePackedUIntDelta(data.interact, baseline.interact, compressionModel);
            writer.WritePackedUIntDelta(data.sprint, baseline.sprint, compressionModel);
        }

        public void Deserialize(ref DataStreamReader reader, ref PropHunt.Mixed.Commands.PlayerInput data, in PropHunt.Mixed.Commands.PlayerInput baseline, NetworkCompressionModel compressionModel)
        {
            data.tick = (uint) reader.ReadPackedUIntDelta(baseline.tick, compressionModel);
            data.horizMove = reader.ReadPackedFloatDelta(baseline.horizMove, compressionModel);
            data.vertMove = reader.ReadPackedFloatDelta(baseline.vertMove, compressionModel);
            data.pitchChange = reader.ReadPackedFloatDelta(baseline.pitchChange, compressionModel);
            data.yawChange = reader.ReadPackedFloatDelta(baseline.yawChange, compressionModel);
            data.jump = (byte) reader.ReadPackedUIntDelta(baseline.jump, compressionModel);
            data.interact = (byte) reader.ReadPackedUIntDelta(baseline.interact, compressionModel);
            data.sprint = (byte) reader.ReadPackedUIntDelta(baseline.sprint, compressionModel);
        }
    }
    public class PropHuntMixedCommandsPlayerInputSendCommandSystem : CommandSendSystem<PropHuntMixedCommandsPlayerInputSerializer, PropHunt.Mixed.Commands.PlayerInput>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class PropHuntMixedCommandsPlayerInputReceiveCommandSystem : CommandReceiveSystem<PropHuntMixedCommandsPlayerInputSerializer, PropHunt.Mixed.Commands.PlayerInput>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
