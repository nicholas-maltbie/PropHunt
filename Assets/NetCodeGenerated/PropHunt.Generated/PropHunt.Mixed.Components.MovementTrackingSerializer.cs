//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using System;
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.NetCode.LowLevel.Unsafe;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;
using PropHunt.Mixed.Components;

namespace PropHunt.Generated
{
    [BurstCompile]
    public struct PropHuntMixedComponentsMovementTrackingGhostComponentSerializer
    {
        static PropHuntMixedComponentsMovementTrackingGhostComponentSerializer()
        {
            State = new GhostComponentSerializer.State
            {
                GhostFieldsHash = 1463799967129362517,
                ExcludeFromComponentCollectionHash = 0,
                ComponentType = ComponentType.ReadWrite<PropHunt.Mixed.Components.MovementTracking>(),
                ComponentSize = UnsafeUtility.SizeOf<PropHunt.Mixed.Components.MovementTracking>(),
                SnapshotSize = UnsafeUtility.SizeOf<Snapshot>(),
                ChangeMaskBits = ChangeMaskBits,
                SendMask = GhostComponentSerializer.SendMask.Interpolated | GhostComponentSerializer.SendMask.Predicted,
                SendForChildEntities = 1,
                CopyToSnapshot =
                    new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyToSnapshot),
                CopyFromSnapshot =
                    new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyFromSnapshot),
                RestoreFromBackup =
                    new PortableFunctionPointer<GhostComponentSerializer.RestoreFromBackupDelegate>(RestoreFromBackup),
                PredictDelta = new PortableFunctionPointer<GhostComponentSerializer.PredictDeltaDelegate>(PredictDelta),
                CalculateChangeMask =
                    new PortableFunctionPointer<GhostComponentSerializer.CalculateChangeMaskDelegate>(
                        CalculateChangeMask),
                Serialize = new PortableFunctionPointer<GhostComponentSerializer.SerializeDelegate>(Serialize),
                Deserialize = new PortableFunctionPointer<GhostComponentSerializer.DeserializeDelegate>(Deserialize),
                #if UNITY_EDITOR || DEVELOPMENT_BUILD
                ReportPredictionErrors = new PortableFunctionPointer<GhostComponentSerializer.ReportPredictionErrorsDelegate>(ReportPredictionErrors),
                #endif
            };
            #if UNITY_EDITOR || DEVELOPMENT_BUILD
            State.NumPredictionErrorNames = GetPredictionErrorNames(ref State.PredictionErrorNames);
            #endif
        }
        public static readonly GhostComponentSerializer.State State;
        public struct Snapshot
        {
            public float position_x;
            public float position_y;
            public float position_z;
            public float previousPosition_x;
            public float previousPosition_y;
            public float previousPosition_z;
            public float attitudeX;
            public float attitudeY;
            public float attitudeZ;
            public float attitudeW;
            public float previousAttitudeX;
            public float previousAttitudeY;
            public float previousAttitudeZ;
            public float previousAttitudeW;
            public int updates;
        }
        public const int ChangeMaskBits = 5;
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyToSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData, snapshotOffset + snapshotStride*i);
                ref var component = ref GhostComponentSerializer.TypeCast<PropHunt.Mixed.Components.MovementTracking>(componentData, componentStride*i);
                ref var serializerState = ref GhostComponentSerializer.TypeCast<GhostSerializerState>(stateData, 0);
                snapshot.position_x = component.position.x;
                snapshot.position_y = component.position.y;
                snapshot.position_z = component.position.z;
                snapshot.previousPosition_x = component.previousPosition.x;
                snapshot.previousPosition_y = component.previousPosition.y;
                snapshot.previousPosition_z = component.previousPosition.z;
                snapshot.attitudeX = component.attitude.value.x;
                snapshot.attitudeY = component.attitude.value.y;
                snapshot.attitudeZ = component.attitude.value.z;
                snapshot.attitudeW = component.attitude.value.w;
                snapshot.previousAttitudeX = component.previousAttitude.value.x;
                snapshot.previousAttitudeY = component.previousAttitude.value.y;
                snapshot.previousAttitudeZ = component.previousAttitude.value.z;
                snapshot.previousAttitudeW = component.previousAttitude.value.w;
                snapshot.updates = (int) component.updates;
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast<SnapshotData.DataAtTick>(snapshotData, snapshotStride*i);
                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);
                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);
                float snapshotInterpolationFactor = snapshotInterpolationData.InterpolationFactor;
                ref var component = ref GhostComponentSerializer.TypeCast<PropHunt.Mixed.Components.MovementTracking>(componentData, componentStride*i);
                var deserializerState = GhostComponentSerializer.TypeCast<GhostDeserializerState>(stateData, 0);
                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;
                component.position = new float3(snapshotBefore.position_x, snapshotBefore.position_y, snapshotBefore.position_z);
                component.previousPosition = new float3(snapshotBefore.previousPosition_x, snapshotBefore.previousPosition_y, snapshotBefore.previousPosition_z);
                component.attitude = new quaternion(snapshotBefore.attitudeX, snapshotBefore.attitudeY, snapshotBefore.attitudeZ, snapshotBefore.attitudeW);
                component.previousAttitude = new quaternion(snapshotBefore.previousAttitudeX, snapshotBefore.previousAttitudeY, snapshotBefore.previousAttitudeZ, snapshotBefore.previousAttitudeW);
                component.updates = (int) snapshotBefore.updates;
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.RestoreFromBackupDelegate))]
        private static void RestoreFromBackup(IntPtr componentData, IntPtr backupData)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<PropHunt.Mixed.Components.MovementTracking>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<PropHunt.Mixed.Components.MovementTracking>(backupData, 0);
            component.position.x = backup.position.x;
            component.position.y = backup.position.y;
            component.position.z = backup.position.z;
            component.previousPosition.x = backup.previousPosition.x;
            component.previousPosition.y = backup.previousPosition.y;
            component.previousPosition.z = backup.previousPosition.z;
            component.attitude = backup.attitude;
            component.previousAttitude = backup.previousAttitude;
            component.updates = backup.updates;
        }

        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.PredictDeltaDelegate))]
        private static void PredictDelta(IntPtr snapshotData, IntPtr baseline1Data, IntPtr baseline2Data, ref GhostDeltaPredictor predictor)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline1 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline1Data);
            ref var baseline2 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline2Data);
            snapshot.updates = predictor.PredictInt(snapshot.updates, baseline1.updates, baseline2.updates);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CalculateChangeMaskDelegate))]
        private static void CalculateChangeMask(IntPtr snapshotData, IntPtr baselineData, IntPtr bits, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask;
            changeMask = (snapshot.position_x != baseline.position_x) ? 1u : 0;
            changeMask |= (snapshot.position_y != baseline.position_y) ? (1u<<0) : 0;
            changeMask |= (snapshot.position_z != baseline.position_z) ? (1u<<0) : 0;
            changeMask |= (snapshot.previousPosition_x != baseline.previousPosition_x) ? (1u<<1) : 0;
            changeMask |= (snapshot.previousPosition_y != baseline.previousPosition_y) ? (1u<<1) : 0;
            changeMask |= (snapshot.previousPosition_z != baseline.previousPosition_z) ? (1u<<1) : 0;
            changeMask |= (snapshot.attitudeX != baseline.attitudeX ||
                        snapshot.attitudeY != baseline.attitudeY ||
                        snapshot.attitudeZ != baseline.attitudeZ ||
                        snapshot.attitudeW != baseline.attitudeW) ? (1u<<2) : 0;
            changeMask |= (snapshot.previousAttitudeX != baseline.previousAttitudeX ||
                        snapshot.previousAttitudeY != baseline.previousAttitudeY ||
                        snapshot.previousAttitudeZ != baseline.previousAttitudeZ ||
                        snapshot.previousAttitudeW != baseline.previousAttitudeW) ? (1u<<3) : 0;
            changeMask |= (snapshot.updates != baseline.updates) ? (1u<<4) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 5);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.SerializeDelegate))]
        private static void Serialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamWriter writer, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedFloatDelta(snapshot.position_x, baseline.position_x, compressionModel);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedFloatDelta(snapshot.position_y, baseline.position_y, compressionModel);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedFloatDelta(snapshot.position_z, baseline.position_z, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedFloatDelta(snapshot.previousPosition_x, baseline.previousPosition_x, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedFloatDelta(snapshot.previousPosition_y, baseline.previousPosition_y, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedFloatDelta(snapshot.previousPosition_z, baseline.previousPosition_z, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
            {
                writer.WritePackedFloatDelta(snapshot.attitudeX, baseline.attitudeX, compressionModel);
                writer.WritePackedFloatDelta(snapshot.attitudeY, baseline.attitudeY, compressionModel);
                writer.WritePackedFloatDelta(snapshot.attitudeZ, baseline.attitudeZ, compressionModel);
                writer.WritePackedFloatDelta(snapshot.attitudeW, baseline.attitudeW, compressionModel);
            }
            if ((changeMask & (1 << 3)) != 0)
            {
                writer.WritePackedFloatDelta(snapshot.previousAttitudeX, baseline.previousAttitudeX, compressionModel);
                writer.WritePackedFloatDelta(snapshot.previousAttitudeY, baseline.previousAttitudeY, compressionModel);
                writer.WritePackedFloatDelta(snapshot.previousAttitudeZ, baseline.previousAttitudeZ, compressionModel);
                writer.WritePackedFloatDelta(snapshot.previousAttitudeW, baseline.previousAttitudeW, compressionModel);
            }
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedIntDelta(snapshot.updates, baseline.updates, compressionModel);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.DeserializeDelegate))]
        private static void Deserialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamReader reader, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                snapshot.position_x = reader.ReadPackedFloatDelta(baseline.position_x, compressionModel);
            else
                snapshot.position_x = baseline.position_x;
            if ((changeMask & (1 << 0)) != 0)
                snapshot.position_y = reader.ReadPackedFloatDelta(baseline.position_y, compressionModel);
            else
                snapshot.position_y = baseline.position_y;
            if ((changeMask & (1 << 0)) != 0)
                snapshot.position_z = reader.ReadPackedFloatDelta(baseline.position_z, compressionModel);
            else
                snapshot.position_z = baseline.position_z;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.previousPosition_x = reader.ReadPackedFloatDelta(baseline.previousPosition_x, compressionModel);
            else
                snapshot.previousPosition_x = baseline.previousPosition_x;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.previousPosition_y = reader.ReadPackedFloatDelta(baseline.previousPosition_y, compressionModel);
            else
                snapshot.previousPosition_y = baseline.previousPosition_y;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.previousPosition_z = reader.ReadPackedFloatDelta(baseline.previousPosition_z, compressionModel);
            else
                snapshot.previousPosition_z = baseline.previousPosition_z;
            if ((changeMask & (1 << 2)) != 0)
            {
                snapshot.attitudeX = reader.ReadPackedFloatDelta(baseline.attitudeX, compressionModel);
                snapshot.attitudeY = reader.ReadPackedFloatDelta(baseline.attitudeY, compressionModel);
                snapshot.attitudeZ = reader.ReadPackedFloatDelta(baseline.attitudeZ, compressionModel);
                snapshot.attitudeW = reader.ReadPackedFloatDelta(baseline.attitudeW, compressionModel);
            }
            else
            {
                snapshot.attitudeX = baseline.attitudeX;
                snapshot.attitudeY = baseline.attitudeY;
                snapshot.attitudeZ = baseline.attitudeZ;
                snapshot.attitudeW = baseline.attitudeW;
            }
            if ((changeMask & (1 << 3)) != 0)
            {
                snapshot.previousAttitudeX = reader.ReadPackedFloatDelta(baseline.previousAttitudeX, compressionModel);
                snapshot.previousAttitudeY = reader.ReadPackedFloatDelta(baseline.previousAttitudeY, compressionModel);
                snapshot.previousAttitudeZ = reader.ReadPackedFloatDelta(baseline.previousAttitudeZ, compressionModel);
                snapshot.previousAttitudeW = reader.ReadPackedFloatDelta(baseline.previousAttitudeW, compressionModel);
            }
            else
            {
                snapshot.previousAttitudeX = baseline.previousAttitudeX;
                snapshot.previousAttitudeY = baseline.previousAttitudeY;
                snapshot.previousAttitudeZ = baseline.previousAttitudeZ;
                snapshot.previousAttitudeW = baseline.previousAttitudeW;
            }
            if ((changeMask & (1 << 4)) != 0)
                snapshot.updates = reader.ReadPackedIntDelta(baseline.updates, compressionModel);
            else
                snapshot.updates = baseline.updates;
        }
        #if UNITY_EDITOR || DEVELOPMENT_BUILD
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.ReportPredictionErrorsDelegate))]
        private static void ReportPredictionErrors(IntPtr componentData, IntPtr backupData, ref UnsafeList<float> errors)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<PropHunt.Mixed.Components.MovementTracking>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<PropHunt.Mixed.Components.MovementTracking>(backupData, 0);
            int errorIndex = 0;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.position, backup.position));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.previousPosition, backup.previousPosition));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.attitude.value, backup.attitude.value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.previousAttitude.value, backup.previousAttitude.value));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.updates - backup.updates));
            ++errorIndex;
        }
        private static int GetPredictionErrorNames(ref FixedString512 names)
        {
            int nameCount = 0;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("position"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("previousPosition"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("attitude"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("previousAttitude"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("updates"));
            ++nameCount;
            return nameCount;
        }
        #endif
    }
}