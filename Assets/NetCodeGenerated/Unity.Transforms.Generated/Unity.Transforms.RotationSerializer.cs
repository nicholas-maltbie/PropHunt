//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using System;
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.NetCode.LowLevel.Unsafe;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;

namespace Unity.Transforms.Generated
{
    [BurstCompile]
    public struct UnityTransformsRotationGhostComponentSerializer
    {
        static UnityTransformsRotationGhostComponentSerializer()
        {
            State = new GhostComponentSerializer.State
            {
                GhostFieldsHash = 13806170254378846403,
                ExcludeFromComponentCollectionHash = 0,
                ComponentType = ComponentType.ReadWrite<Unity.Transforms.Rotation>(),
                ComponentSize = UnsafeUtility.SizeOf<Unity.Transforms.Rotation>(),
                SnapshotSize = UnsafeUtility.SizeOf<Snapshot>(),
                ChangeMaskBits = ChangeMaskBits,
                SendMask = GhostComponentSerializer.SendMask.Interpolated | GhostComponentSerializer.SendMask.Predicted,
                SendForChildEntities = 0,
                CopyToSnapshot =
                    new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyToSnapshot),
                CopyFromSnapshot =
                    new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyFromSnapshot),
                RestoreFromBackup =
                    new PortableFunctionPointer<GhostComponentSerializer.RestoreFromBackupDelegate>(RestoreFromBackup),
                PredictDelta = new PortableFunctionPointer<GhostComponentSerializer.PredictDeltaDelegate>(PredictDelta),
                CalculateChangeMask =
                    new PortableFunctionPointer<GhostComponentSerializer.CalculateChangeMaskDelegate>(
                        CalculateChangeMask),
                Serialize = new PortableFunctionPointer<GhostComponentSerializer.SerializeDelegate>(Serialize),
                Deserialize = new PortableFunctionPointer<GhostComponentSerializer.DeserializeDelegate>(Deserialize),
                #if UNITY_EDITOR || DEVELOPMENT_BUILD
                ReportPredictionErrors = new PortableFunctionPointer<GhostComponentSerializer.ReportPredictionErrorsDelegate>(ReportPredictionErrors),
                #endif
            };
            #if UNITY_EDITOR || DEVELOPMENT_BUILD
            State.NumPredictionErrorNames = GetPredictionErrorNames(ref State.PredictionErrorNames);
            #endif
        }
        public static readonly GhostComponentSerializer.State State;
        public struct Snapshot
        {
            public int ValueX;
            public int ValueY;
            public int ValueZ;
            public int ValueW;
        }
        public const int ChangeMaskBits = 1;
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyToSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData, snapshotOffset + snapshotStride*i);
                ref var component = ref GhostComponentSerializer.TypeCast<Unity.Transforms.Rotation>(componentData, componentStride*i);
                ref var serializerState = ref GhostComponentSerializer.TypeCast<GhostSerializerState>(stateData, 0);
                snapshot.ValueX = (int)math.round(component.Value.value.x * 1000);
                snapshot.ValueY = (int)math.round(component.Value.value.y * 1000);
                snapshot.ValueZ = (int)math.round(component.Value.value.z * 1000);
                snapshot.ValueW = (int)math.round(component.Value.value.w * 1000);
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast<SnapshotData.DataAtTick>(snapshotData, snapshotStride*i);
                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);
                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);
                float snapshotInterpolationFactor = snapshotInterpolationData.InterpolationFactor;
                ref var component = ref GhostComponentSerializer.TypeCast<Unity.Transforms.Rotation>(componentData, componentStride*i);
                var deserializerState = GhostComponentSerializer.TypeCast<GhostDeserializerState>(stateData, 0);
                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;
                component.Value = math.slerp(
                    math.normalize(new quaternion(snapshotBefore.ValueX * 0.001f, snapshotBefore.ValueY * 0.001f, snapshotBefore.ValueZ * 0.001f, snapshotBefore.ValueW * 0.001f)),
                    math.normalize(new quaternion(snapshotAfter.ValueX * 0.001f, snapshotAfter.ValueY * 0.001f, snapshotAfter.ValueZ * 0.001f, snapshotAfter.ValueW * 0.001f)),
                    snapshotInterpolationFactor);
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.RestoreFromBackupDelegate))]
        private static void RestoreFromBackup(IntPtr componentData, IntPtr backupData)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<Unity.Transforms.Rotation>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<Unity.Transforms.Rotation>(backupData, 0);
            component.Value = backup.Value;
        }

        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.PredictDeltaDelegate))]
        private static void PredictDelta(IntPtr snapshotData, IntPtr baseline1Data, IntPtr baseline2Data, ref GhostDeltaPredictor predictor)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline1 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline1Data);
            ref var baseline2 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline2Data);
            snapshot.ValueX = predictor.PredictInt(snapshot.ValueX, baseline1.ValueX, baseline2.ValueX);
            snapshot.ValueY = predictor.PredictInt(snapshot.ValueY, baseline1.ValueY, baseline2.ValueY);
            snapshot.ValueZ = predictor.PredictInt(snapshot.ValueZ, baseline1.ValueZ, baseline2.ValueZ);
            snapshot.ValueW = predictor.PredictInt(snapshot.ValueW, baseline1.ValueW, baseline2.ValueW);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CalculateChangeMaskDelegate))]
        private static void CalculateChangeMask(IntPtr snapshotData, IntPtr baselineData, IntPtr bits, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask;
            changeMask = (snapshot.ValueX != baseline.ValueX ||
                        snapshot.ValueY != baseline.ValueY ||
                        snapshot.ValueZ != baseline.ValueZ ||
                        snapshot.ValueW != baseline.ValueW) ? 1u : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 1);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.SerializeDelegate))]
        private static void Serialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamWriter writer, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
            {
                writer.WritePackedIntDelta(snapshot.ValueX, baseline.ValueX, compressionModel);
                writer.WritePackedIntDelta(snapshot.ValueY, baseline.ValueY, compressionModel);
                writer.WritePackedIntDelta(snapshot.ValueZ, baseline.ValueZ, compressionModel);
                writer.WritePackedIntDelta(snapshot.ValueW, baseline.ValueW, compressionModel);
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.DeserializeDelegate))]
        private static void Deserialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamReader reader, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
            {
                snapshot.ValueX = reader.ReadPackedIntDelta(baseline.ValueX, compressionModel);
                snapshot.ValueY = reader.ReadPackedIntDelta(baseline.ValueY, compressionModel);
                snapshot.ValueZ = reader.ReadPackedIntDelta(baseline.ValueZ, compressionModel);
                snapshot.ValueW = reader.ReadPackedIntDelta(baseline.ValueW, compressionModel);
            }
            else
            {
                snapshot.ValueX = baseline.ValueX;
                snapshot.ValueY = baseline.ValueY;
                snapshot.ValueZ = baseline.ValueZ;
                snapshot.ValueW = baseline.ValueW;
            }
        }
        #if UNITY_EDITOR || DEVELOPMENT_BUILD
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.ReportPredictionErrorsDelegate))]
        private static void ReportPredictionErrors(IntPtr componentData, IntPtr backupData, ref UnsafeList<float> errors)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<Unity.Transforms.Rotation>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<Unity.Transforms.Rotation>(backupData, 0);
            int errorIndex = 0;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Value.value, backup.Value.value));
            ++errorIndex;
        }
        private static int GetPredictionErrorNames(ref FixedString512 names)
        {
            int nameCount = 0;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Value"));
            ++nameCount;
            return nameCount;
        }
        #endif
    }
}