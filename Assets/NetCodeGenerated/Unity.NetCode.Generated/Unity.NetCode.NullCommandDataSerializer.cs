//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;


namespace Unity.NetCode.Generated
{
    public struct UnityNetCodeNullCommandDataSerializer : ICommandDataSerializer<Unity.NetCode.NullCommandData>
    {
        public void Serialize(ref DataStreamWriter writer, in Unity.NetCode.NullCommandData data)
        {
        }

        public void Deserialize(ref DataStreamReader reader, ref Unity.NetCode.NullCommandData data)
        {
        }

        public void Serialize(ref DataStreamWriter writer, in Unity.NetCode.NullCommandData data, in Unity.NetCode.NullCommandData baseline, NetworkCompressionModel compressionModel)
        {
        }

        public void Deserialize(ref DataStreamReader reader, ref Unity.NetCode.NullCommandData data, in Unity.NetCode.NullCommandData baseline, NetworkCompressionModel compressionModel)
        {
        }
    }
    public class UnityNetCodeNullCommandDataSendCommandSystem : CommandSendSystem<UnityNetCodeNullCommandDataSerializer, Unity.NetCode.NullCommandData>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class UnityNetCodeNullCommandDataReceiveCommandSystem : CommandReceiveSystem<UnityNetCodeNullCommandDataSerializer, Unity.NetCode.NullCommandData>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
