#!/usr/bin/env bash

# Exit on error
# exit when any command fails
set -e
set -o pipefail

# RESHAPER SECTION START

# Credit for this great script goes to Gustav Wengel at https://github.com/GeeWee/reshaper-pre-commit-hook
# This has been modified for use in this project

# Copyright 2020 Gustav Wengel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
# to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Folder with githooks files
GIT_HOOKS_DIR="./.githooks"

# keep track of the last executed command
trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
# echo an error message before exiting
trap 'echo "\"${last_command}\" command filed with exit code $?."' ERR

# If the formatter is not installed, install it now
if [[ ! -d ${GIT_HOOKS_DIR}/resharper/bin ]]; then
    echo "Resharper not installed, installing to $GIT_HOOKS_DIR/resharper/bin"
    "${GIT_HOOKS_DIR}/resharper/install-resharper.sh"
fi

# - Actual script
STAGED_FILES=`git diff --name-only --cached --diff-filter=d`
echo "Staged files ${STAGED_FILES}"

# Build edit string, by replacing newlines with semicolons.
# --diff-filter=d only filters files that are not deleted, which means we won't have trouble adding them afterwards
INCLUDE_STRING=`git diff --name-only --cached --diff-filter=d | sed ':a;N;$!ba;s/\n/;/g'`
echo "Include string: $INCLUDE_STRING"

# If the include string is empty, we're done. This happens e.g. if the commit only consists of deleted files.
if [[ -z "$INCLUDE_STRING" ]]
then
    echo "No files to change"
    exit 0
fi

# Edit your project files here
echo "Formatting files..."
if [[ "$OSTYPE" == "msys"* ]]; then
    # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
    ${GIT_HOOKS_DIR}/resharper/bin/cleanupcode.exe --config="${GIT_HOOKS_DIR}/resharper/config.xml" ./PropHunt.sln --include="$INCLUDE_STRING"
elif [[ "$OSTYPE" == "cygwin" ]]; then
    #Cygwin terminal emulator
    ${GIT_HOOKS_DIR}/resharper/bin/cleanupcode.exe --config="${GIT_HOOKS_DIR}/resharper/config.xml" ./PropHunt.sln --include="$INCLUDE_STRING"
else
    sh $GIT_HOOKS_DIR/resharper/bin/cleanupcode.sh --config="${GIT_HOOKS_DIR}/resharper/config.xml" ./PropHunt.sln --include="$INCLUDE_STRING"
fi

# Restage files
echo "Restaging files: $STAGED_FILES"
echo ${STAGED_FILES} | xargs -t -l git add

# RESHAPER SECTION END

# Script kindly posted by oldman to github at https://github.com/imoldman/config

# REMOVE TRAILING WHITESPACE SECTION START
# A git hook script to find and fix trailing whitespace
# in your commits. Bypass it with the --no-verify option
# to git-commit
#
# usage: make a soft link to this file, e.g., ln -s ~/config/pre-commit.git.sh ~/some_project/.git/hooks/pre-commit

# detect platform
platform="win"
uname_result=`uname`
if [ "$uname_result" = "Linux" ]; then
  platform="linux"
elif [ "$uname_result" = "Darwin" ]; then
  platform="mac"
fi

# change IFS to ignore filename's space in |for|
IFS="
"
# autoremove trailing whitespace
for line in `git diff --check --cached | sed '/^[+-]/d'` ; do
  # get file name
  if [ "$platform" = "mac" ]; then
    file="`echo $line | sed -E 's/:[0-9]+: .*//'`"
  else
    file="`echo $line | sed -r 's/:[0-9]+: .*//'`"
  fi
  # display tips
  echo -e "auto remove trailing whitespace in \033[31m$file\033[0m!"
  # since $file in working directory isn't always equal to $file in index, so we backup it
  mv -f "$file" "${file}.save"
  # discard changes in working directory
  git checkout -- "$file"
  # remove trailing whitespace
  if [ "$platform" = "win" ]; then
    # in windows, `sed -i` adds ready-only attribute to $file(I don't kown why), so we use temp file instead
    sed 's/[[:space:]]*$//' "$file" > "${file}.bak"
    mv -f "${file}.bak" "$file"
  elif [ "$platform" == "mac" ]; then
    sed -i "" 's/[[:space:]]*$//' "$file"
  else
    sed -i 's/[[:space:]]*$//' "$file"
  fi
  git add "$file"
  # restore the $file
  sed 's/[[:space:]]*$//' "${file}.save" > "$file"
  rm "${file}.save"
done

if [ "x`git status -s | grep '^[A|D|M]'`" = "x" ]; then
  # empty commit
  echo
  echo -e "\033[31mNO CHANGES ADDED, ABORT COMMIT!\033[0m"
  exit 1
fi

# REMOVE TRAILING WHITESPACE SECTION END

echo "pre-commit hook finished"
